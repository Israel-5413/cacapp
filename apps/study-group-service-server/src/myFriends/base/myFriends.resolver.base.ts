/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MyFriends } from "./MyFriends";
import { MyFriendsCountArgs } from "./MyFriendsCountArgs";
import { MyFriendsFindManyArgs } from "./MyFriendsFindManyArgs";
import { MyFriendsFindUniqueArgs } from "./MyFriendsFindUniqueArgs";
import { CreateMyFriendsArgs } from "./CreateMyFriendsArgs";
import { UpdateMyFriendsArgs } from "./UpdateMyFriendsArgs";
import { DeleteMyFriendsArgs } from "./DeleteMyFriendsArgs";
import { MyFriendsService } from "../myFriends.service";
@graphql.Resolver(() => MyFriends)
export class MyFriendsResolverBase {
  constructor(protected readonly service: MyFriendsService) {}

  async _myFriendsItemsMeta(
    @graphql.Args() args: MyFriendsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MyFriends])
  async myFriendsItems(
    @graphql.Args() args: MyFriendsFindManyArgs
  ): Promise<MyFriends[]> {
    return this.service.myFriendsItems(args);
  }

  @graphql.Query(() => MyFriends, { nullable: true })
  async myFriends(
    @graphql.Args() args: MyFriendsFindUniqueArgs
  ): Promise<MyFriends | null> {
    const result = await this.service.myFriends(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MyFriends)
  async createMyFriends(
    @graphql.Args() args: CreateMyFriendsArgs
  ): Promise<MyFriends> {
    return await this.service.createMyFriends({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MyFriends)
  async updateMyFriends(
    @graphql.Args() args: UpdateMyFriendsArgs
  ): Promise<MyFriends | null> {
    try {
      return await this.service.updateMyFriends({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MyFriends)
  async deleteMyFriends(
    @graphql.Args() args: DeleteMyFriendsArgs
  ): Promise<MyFriends | null> {
    try {
      return await this.service.deleteMyFriends(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
