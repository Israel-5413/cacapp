/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MyFriendsService } from "../myFriends.service";
import { MyFriendsCreateInput } from "./MyFriendsCreateInput";
import { MyFriends } from "./MyFriends";
import { MyFriendsFindManyArgs } from "./MyFriendsFindManyArgs";
import { MyFriendsWhereUniqueInput } from "./MyFriendsWhereUniqueInput";
import { MyFriendsUpdateInput } from "./MyFriendsUpdateInput";

export class MyFriendsControllerBase {
  constructor(protected readonly service: MyFriendsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MyFriends })
  async createMyFriends(
    @common.Body() data: MyFriendsCreateInput
  ): Promise<MyFriends> {
    return await this.service.createMyFriends({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        myUniqueId: true,
        friendsUniqueId: true,
        status: true,
        dateCreated: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MyFriends] })
  @ApiNestedQuery(MyFriendsFindManyArgs)
  async myFriendsItems(@common.Req() request: Request): Promise<MyFriends[]> {
    const args = plainToClass(MyFriendsFindManyArgs, request.query);
    return this.service.myFriendsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        myUniqueId: true,
        friendsUniqueId: true,
        status: true,
        dateCreated: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MyFriends })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async myFriends(
    @common.Param() params: MyFriendsWhereUniqueInput
  ): Promise<MyFriends | null> {
    const result = await this.service.myFriends({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        myUniqueId: true,
        friendsUniqueId: true,
        status: true,
        dateCreated: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MyFriends })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMyFriends(
    @common.Param() params: MyFriendsWhereUniqueInput,
    @common.Body() data: MyFriendsUpdateInput
  ): Promise<MyFriends | null> {
    try {
      return await this.service.updateMyFriends({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          myUniqueId: true,
          friendsUniqueId: true,
          status: true,
          dateCreated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MyFriends })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMyFriends(
    @common.Param() params: MyFriendsWhereUniqueInput
  ): Promise<MyFriends | null> {
    try {
      return await this.service.deleteMyFriends({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          myUniqueId: true,
          friendsUniqueId: true,
          status: true,
          dateCreated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
