/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudyGroup } from "./StudyGroup";
import { StudyGroupCountArgs } from "./StudyGroupCountArgs";
import { StudyGroupFindManyArgs } from "./StudyGroupFindManyArgs";
import { StudyGroupFindUniqueArgs } from "./StudyGroupFindUniqueArgs";
import { CreateStudyGroupArgs } from "./CreateStudyGroupArgs";
import { UpdateStudyGroupArgs } from "./UpdateStudyGroupArgs";
import { DeleteStudyGroupArgs } from "./DeleteStudyGroupArgs";
import { StudyGroupService } from "../studyGroup.service";
@graphql.Resolver(() => StudyGroup)
export class StudyGroupResolverBase {
  constructor(protected readonly service: StudyGroupService) {}

  async _studyGroupsMeta(
    @graphql.Args() args: StudyGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudyGroup])
  async studyGroups(
    @graphql.Args() args: StudyGroupFindManyArgs
  ): Promise<StudyGroup[]> {
    return this.service.studyGroups(args);
  }

  @graphql.Query(() => StudyGroup, { nullable: true })
  async studyGroup(
    @graphql.Args() args: StudyGroupFindUniqueArgs
  ): Promise<StudyGroup | null> {
    const result = await this.service.studyGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudyGroup)
  async createStudyGroup(
    @graphql.Args() args: CreateStudyGroupArgs
  ): Promise<StudyGroup> {
    return await this.service.createStudyGroup({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StudyGroup)
  async updateStudyGroup(
    @graphql.Args() args: UpdateStudyGroupArgs
  ): Promise<StudyGroup | null> {
    try {
      return await this.service.updateStudyGroup({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudyGroup)
  async deleteStudyGroup(
    @graphql.Args() args: DeleteStudyGroupArgs
  ): Promise<StudyGroup | null> {
    try {
      return await this.service.deleteStudyGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
