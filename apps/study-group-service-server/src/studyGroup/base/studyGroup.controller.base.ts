/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudyGroupService } from "../studyGroup.service";
import { StudyGroupCreateInput } from "./StudyGroupCreateInput";
import { StudyGroup } from "./StudyGroup";
import { StudyGroupFindManyArgs } from "./StudyGroupFindManyArgs";
import { StudyGroupWhereUniqueInput } from "./StudyGroupWhereUniqueInput";
import { StudyGroupUpdateInput } from "./StudyGroupUpdateInput";

export class StudyGroupControllerBase {
  constructor(protected readonly service: StudyGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudyGroup })
  async createStudyGroup(
    @common.Body() data: StudyGroupCreateInput
  ): Promise<StudyGroup> {
    return await this.service.createStudyGroup({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        uniqueId: true,
        name: true,
        description: true,
        status: true,
        category: true,
        groupProfileImage: true,
        creatorId: true,
        dateCreated: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudyGroup] })
  @ApiNestedQuery(StudyGroupFindManyArgs)
  async studyGroups(@common.Req() request: Request): Promise<StudyGroup[]> {
    const args = plainToClass(StudyGroupFindManyArgs, request.query);
    return this.service.studyGroups({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        uniqueId: true,
        name: true,
        description: true,
        status: true,
        category: true,
        groupProfileImage: true,
        creatorId: true,
        dateCreated: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudyGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studyGroup(
    @common.Param() params: StudyGroupWhereUniqueInput
  ): Promise<StudyGroup | null> {
    const result = await this.service.studyGroup({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        uniqueId: true,
        name: true,
        description: true,
        status: true,
        category: true,
        groupProfileImage: true,
        creatorId: true,
        dateCreated: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudyGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudyGroup(
    @common.Param() params: StudyGroupWhereUniqueInput,
    @common.Body() data: StudyGroupUpdateInput
  ): Promise<StudyGroup | null> {
    try {
      return await this.service.updateStudyGroup({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          uniqueId: true,
          name: true,
          description: true,
          status: true,
          category: true,
          groupProfileImage: true,
          creatorId: true,
          dateCreated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudyGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudyGroup(
    @common.Param() params: StudyGroupWhereUniqueInput
  ): Promise<StudyGroup | null> {
    try {
      return await this.service.deleteStudyGroup({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          uniqueId: true,
          name: true,
          description: true,
          status: true,
          category: true,
          groupProfileImage: true,
          creatorId: true,
          dateCreated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
