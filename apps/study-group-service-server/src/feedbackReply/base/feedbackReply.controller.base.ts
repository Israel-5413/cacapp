/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FeedbackReplyService } from "../feedbackReply.service";
import { FeedbackReplyCreateInput } from "./FeedbackReplyCreateInput";
import { FeedbackReply } from "./FeedbackReply";
import { FeedbackReplyFindManyArgs } from "./FeedbackReplyFindManyArgs";
import { FeedbackReplyWhereUniqueInput } from "./FeedbackReplyWhereUniqueInput";
import { FeedbackReplyUpdateInput } from "./FeedbackReplyUpdateInput";

export class FeedbackReplyControllerBase {
  constructor(protected readonly service: FeedbackReplyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FeedbackReply })
  async createFeedbackReply(
    @common.Body() data: FeedbackReplyCreateInput
  ): Promise<FeedbackReply> {
    return await this.service.createFeedbackReply({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        feedbackId: true,
        replyerId: true,
        comment: true,
        dateCreated: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FeedbackReply] })
  @ApiNestedQuery(FeedbackReplyFindManyArgs)
  async feedbackReplies(
    @common.Req() request: Request
  ): Promise<FeedbackReply[]> {
    const args = plainToClass(FeedbackReplyFindManyArgs, request.query);
    return this.service.feedbackReplies({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        feedbackId: true,
        replyerId: true,
        comment: true,
        dateCreated: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FeedbackReply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async feedbackReply(
    @common.Param() params: FeedbackReplyWhereUniqueInput
  ): Promise<FeedbackReply | null> {
    const result = await this.service.feedbackReply({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        feedbackId: true,
        replyerId: true,
        comment: true,
        dateCreated: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FeedbackReply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFeedbackReply(
    @common.Param() params: FeedbackReplyWhereUniqueInput,
    @common.Body() data: FeedbackReplyUpdateInput
  ): Promise<FeedbackReply | null> {
    try {
      return await this.service.updateFeedbackReply({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          feedbackId: true,
          replyerId: true,
          comment: true,
          dateCreated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FeedbackReply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFeedbackReply(
    @common.Param() params: FeedbackReplyWhereUniqueInput
  ): Promise<FeedbackReply | null> {
    try {
      return await this.service.deleteFeedbackReply({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          feedbackId: true,
          replyerId: true,
          comment: true,
          dateCreated: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
