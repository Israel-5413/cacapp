/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FeedbackReply as PrismaFeedbackReply } from "@prisma/client";

export class FeedbackReplyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FeedbackReplyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.feedbackReply.count(args);
  }

  async feedbackReplies(
    args: Prisma.FeedbackReplyFindManyArgs
  ): Promise<PrismaFeedbackReply[]> {
    return this.prisma.feedbackReply.findMany(args);
  }
  async feedbackReply(
    args: Prisma.FeedbackReplyFindUniqueArgs
  ): Promise<PrismaFeedbackReply | null> {
    return this.prisma.feedbackReply.findUnique(args);
  }
  async createFeedbackReply(
    args: Prisma.FeedbackReplyCreateArgs
  ): Promise<PrismaFeedbackReply> {
    return this.prisma.feedbackReply.create(args);
  }
  async updateFeedbackReply(
    args: Prisma.FeedbackReplyUpdateArgs
  ): Promise<PrismaFeedbackReply> {
    return this.prisma.feedbackReply.update(args);
  }
  async deleteFeedbackReply(
    args: Prisma.FeedbackReplyDeleteArgs
  ): Promise<PrismaFeedbackReply> {
    return this.prisma.feedbackReply.delete(args);
  }
}
