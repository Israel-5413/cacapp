/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FeedbackReply } from "./FeedbackReply";
import { FeedbackReplyCountArgs } from "./FeedbackReplyCountArgs";
import { FeedbackReplyFindManyArgs } from "./FeedbackReplyFindManyArgs";
import { FeedbackReplyFindUniqueArgs } from "./FeedbackReplyFindUniqueArgs";
import { CreateFeedbackReplyArgs } from "./CreateFeedbackReplyArgs";
import { UpdateFeedbackReplyArgs } from "./UpdateFeedbackReplyArgs";
import { DeleteFeedbackReplyArgs } from "./DeleteFeedbackReplyArgs";
import { FeedbackReplyService } from "../feedbackReply.service";
@graphql.Resolver(() => FeedbackReply)
export class FeedbackReplyResolverBase {
  constructor(protected readonly service: FeedbackReplyService) {}

  async _feedbackRepliesMeta(
    @graphql.Args() args: FeedbackReplyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FeedbackReply])
  async feedbackReplies(
    @graphql.Args() args: FeedbackReplyFindManyArgs
  ): Promise<FeedbackReply[]> {
    return this.service.feedbackReplies(args);
  }

  @graphql.Query(() => FeedbackReply, { nullable: true })
  async feedbackReply(
    @graphql.Args() args: FeedbackReplyFindUniqueArgs
  ): Promise<FeedbackReply | null> {
    const result = await this.service.feedbackReply(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FeedbackReply)
  async createFeedbackReply(
    @graphql.Args() args: CreateFeedbackReplyArgs
  ): Promise<FeedbackReply> {
    return await this.service.createFeedbackReply({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FeedbackReply)
  async updateFeedbackReply(
    @graphql.Args() args: UpdateFeedbackReplyArgs
  ): Promise<FeedbackReply | null> {
    try {
      return await this.service.updateFeedbackReply({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FeedbackReply)
  async deleteFeedbackReply(
    @graphql.Args() args: DeleteFeedbackReplyArgs
  ): Promise<FeedbackReply | null> {
    try {
      return await this.service.deleteFeedbackReply(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
