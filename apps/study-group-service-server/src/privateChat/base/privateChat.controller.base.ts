/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PrivateChatService } from "../privateChat.service";
import { PrivateChatCreateInput } from "./PrivateChatCreateInput";
import { PrivateChat } from "./PrivateChat";
import { PrivateChatFindManyArgs } from "./PrivateChatFindManyArgs";
import { PrivateChatWhereUniqueInput } from "./PrivateChatWhereUniqueInput";
import { PrivateChatUpdateInput } from "./PrivateChatUpdateInput";

export class PrivateChatControllerBase {
  constructor(protected readonly service: PrivateChatService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PrivateChat })
  async createPrivateChat(
    @common.Body() data: PrivateChatCreateInput
  ): Promise<PrivateChat> {
    return await this.service.createPrivateChat({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateCreated: true,
        incomingMessageId: true,
        outgoingMessageId: true,
        message: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PrivateChat] })
  @ApiNestedQuery(PrivateChatFindManyArgs)
  async privateChats(@common.Req() request: Request): Promise<PrivateChat[]> {
    const args = plainToClass(PrivateChatFindManyArgs, request.query);
    return this.service.privateChats({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateCreated: true,
        incomingMessageId: true,
        outgoingMessageId: true,
        message: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PrivateChat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async privateChat(
    @common.Param() params: PrivateChatWhereUniqueInput
  ): Promise<PrivateChat | null> {
    const result = await this.service.privateChat({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateCreated: true,
        incomingMessageId: true,
        outgoingMessageId: true,
        message: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PrivateChat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePrivateChat(
    @common.Param() params: PrivateChatWhereUniqueInput,
    @common.Body() data: PrivateChatUpdateInput
  ): Promise<PrivateChat | null> {
    try {
      return await this.service.updatePrivateChat({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dateCreated: true,
          incomingMessageId: true,
          outgoingMessageId: true,
          message: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PrivateChat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePrivateChat(
    @common.Param() params: PrivateChatWhereUniqueInput
  ): Promise<PrivateChat | null> {
    try {
      return await this.service.deletePrivateChat({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dateCreated: true,
          incomingMessageId: true,
          outgoingMessageId: true,
          message: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
