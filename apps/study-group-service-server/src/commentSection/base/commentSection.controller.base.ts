/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommentSectionService } from "../commentSection.service";
import { CommentSectionCreateInput } from "./CommentSectionCreateInput";
import { CommentSection } from "./CommentSection";
import { CommentSectionFindManyArgs } from "./CommentSectionFindManyArgs";
import { CommentSectionWhereUniqueInput } from "./CommentSectionWhereUniqueInput";
import { CommentSectionUpdateInput } from "./CommentSectionUpdateInput";

export class CommentSectionControllerBase {
  constructor(protected readonly service: CommentSectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommentSection })
  async createCommentSection(
    @common.Body() data: CommentSectionCreateInput
  ): Promise<CommentSection> {
    return await this.service.createCommentSection({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        category: true,
        message: true,
        creatorId: true,
        dateCreated: true,
        status: true,
        uniqueId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommentSection] })
  @ApiNestedQuery(CommentSectionFindManyArgs)
  async commentSections(
    @common.Req() request: Request
  ): Promise<CommentSection[]> {
    const args = plainToClass(CommentSectionFindManyArgs, request.query);
    return this.service.commentSections({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        category: true,
        message: true,
        creatorId: true,
        dateCreated: true,
        status: true,
        uniqueId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommentSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commentSection(
    @common.Param() params: CommentSectionWhereUniqueInput
  ): Promise<CommentSection | null> {
    const result = await this.service.commentSection({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        category: true,
        message: true,
        creatorId: true,
        dateCreated: true,
        status: true,
        uniqueId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommentSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommentSection(
    @common.Param() params: CommentSectionWhereUniqueInput,
    @common.Body() data: CommentSectionUpdateInput
  ): Promise<CommentSection | null> {
    try {
      return await this.service.updateCommentSection({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          category: true,
          message: true,
          creatorId: true,
          dateCreated: true,
          status: true,
          uniqueId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommentSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommentSection(
    @common.Param() params: CommentSectionWhereUniqueInput
  ): Promise<CommentSection | null> {
    try {
      return await this.service.deleteCommentSection({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          category: true,
          message: true,
          creatorId: true,
          dateCreated: true,
          status: true,
          uniqueId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
