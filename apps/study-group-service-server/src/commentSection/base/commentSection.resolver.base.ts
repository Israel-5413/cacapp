/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommentSection } from "./CommentSection";
import { CommentSectionCountArgs } from "./CommentSectionCountArgs";
import { CommentSectionFindManyArgs } from "./CommentSectionFindManyArgs";
import { CommentSectionFindUniqueArgs } from "./CommentSectionFindUniqueArgs";
import { CreateCommentSectionArgs } from "./CreateCommentSectionArgs";
import { UpdateCommentSectionArgs } from "./UpdateCommentSectionArgs";
import { DeleteCommentSectionArgs } from "./DeleteCommentSectionArgs";
import { CommentSectionService } from "../commentSection.service";
@graphql.Resolver(() => CommentSection)
export class CommentSectionResolverBase {
  constructor(protected readonly service: CommentSectionService) {}

  async _commentSectionsMeta(
    @graphql.Args() args: CommentSectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommentSection])
  async commentSections(
    @graphql.Args() args: CommentSectionFindManyArgs
  ): Promise<CommentSection[]> {
    return this.service.commentSections(args);
  }

  @graphql.Query(() => CommentSection, { nullable: true })
  async commentSection(
    @graphql.Args() args: CommentSectionFindUniqueArgs
  ): Promise<CommentSection | null> {
    const result = await this.service.commentSection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommentSection)
  async createCommentSection(
    @graphql.Args() args: CreateCommentSectionArgs
  ): Promise<CommentSection> {
    return await this.service.createCommentSection({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CommentSection)
  async updateCommentSection(
    @graphql.Args() args: UpdateCommentSectionArgs
  ): Promise<CommentSection | null> {
    try {
      return await this.service.updateCommentSection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommentSection)
  async deleteCommentSection(
    @graphql.Args() args: DeleteCommentSectionArgs
  ): Promise<CommentSection | null> {
    try {
      return await this.service.deleteCommentSection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
