/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CommentSection as PrismaCommentSection } from "@prisma/client";

export class CommentSectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommentSectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commentSection.count(args);
  }

  async commentSections(
    args: Prisma.CommentSectionFindManyArgs
  ): Promise<PrismaCommentSection[]> {
    return this.prisma.commentSection.findMany(args);
  }
  async commentSection(
    args: Prisma.CommentSectionFindUniqueArgs
  ): Promise<PrismaCommentSection | null> {
    return this.prisma.commentSection.findUnique(args);
  }
  async createCommentSection(
    args: Prisma.CommentSectionCreateArgs
  ): Promise<PrismaCommentSection> {
    return this.prisma.commentSection.create(args);
  }
  async updateCommentSection(
    args: Prisma.CommentSectionUpdateArgs
  ): Promise<PrismaCommentSection> {
    return this.prisma.commentSection.update(args);
  }
  async deleteCommentSection(
    args: Prisma.CommentSectionDeleteArgs
  ): Promise<PrismaCommentSection> {
    return this.prisma.commentSection.delete(args);
  }
}
